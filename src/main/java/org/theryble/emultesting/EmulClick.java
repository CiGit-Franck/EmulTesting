package org.theryble.emultesting;

import java.awt.AWTException;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.Robot;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.ListModel;
import javax.swing.SwingUtilities;

import com.github.kwhat.jnativehook.GlobalScreen;
import com.github.kwhat.jnativehook.mouse.NativeMouseEvent;
import com.github.kwhat.jnativehook.mouse.NativeMouseListener;

/**
 *
 * @author Franck
 */
public class EmulClick extends JFrame implements NativeMouseListener {

    private transient ListModel<String> listPoint;
    boolean isAddPoint = false;
    boolean singlePass = false;
    boolean isPlay = false;
    private transient MouseMotionThread threadMouse;
    private transient MouseAutomateThread threadMouseAutomate;

    /**
     * Creates new form EmulClick
     */
    public EmulClick() {

        listPoint = new DefaultListModel<>();
        initComponents();

        threadMouse = new MouseMotionThread();
        threadMouse.start();
        threadMouseAutomate = new MouseAutomateThread();

        // Register the global mouse motion listener
        try {
            GlobalScreen.registerNativeHook();
            GlobalScreen.addNativeMouseListener(this);
        } catch (Exception ex) {
            Logger.getLogger(org.theryble.emultesting.EmulClick.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called when the mouse is clicked.
     * If the "Add Point" toggle button is selected, it adds the current mouse
     * position to the list of points.
     */
    @Override
    public void nativeMouseClicked(NativeMouseEvent e) {
        Point pt = MouseInfo.getPointerInfo().getLocation();
        if (isAddPoint) {
            String point = "Point [" + pt.x + " ," + pt.y + "]";
            ((DefaultListModel<String>) listPoint).addElement(point);
            jlPoint.setModel(listPoint);
        }
    }

    /**
     * This method is called when the mouse is pressed.
     * Currently, it does not perform any action.
     * It is left empty as per the original code.
     */
    @Override
    public void nativeMousePressed(NativeMouseEvent e) {
        // Not used
    }

    /**
     * This method is called when the mouse is released.
     * Currently, it does not perform any action.
     * It is left empty as per the original code.
     */
    @Override
    public void nativeMouseReleased(NativeMouseEvent e) {
        // Not used
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jlPoint = new javax.swing.JList<>();
        jPanel1 = new javax.swing.JPanel();
        jsDelay = new javax.swing.JSpinner();
        jtbAdd = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jtbPlay = new javax.swing.JToggleButton();
        jlPosition = new javax.swing.JLabel();
        jbClear = new javax.swing.JButton();
        jbDel = new javax.swing.JButton();

        setTitle("EmulTesting");
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setResizable(false);

        listPoint = new DefaultListModel<>();
        jlPoint.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlPoint.setModel(listPoint);
        jScrollPane1.setViewportView(jlPoint);

        jtbAdd.setText("+");
        jtbAdd.addChangeListener(evt -> {
            isAddPoint = jtbAdd.isSelected();
            if (!isAddPoint) {
                // remove last point if toggle is off
                int lastIndex = listPoint.getSize() - 1;
                if (lastIndex >= 0 && singlePass) {
                    singlePass = false;
                    ((DefaultListModel<String>) listPoint).remove(lastIndex);
                }
            } else {
                singlePass = true;
            }
        });

        jLabel1.setText("seconds");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jtbAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 35,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jsDelay, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 21,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap()));
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jsDelay, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jtbAdd)
                                        .addComponent(jLabel1))
                                .addGap(0, 7, Short.MAX_VALUE)));

        jtbPlay.setText(">");
        jtbPlay.addActionListener(evt -> {
            if (jtbPlay.isSelected()) {
                threadMouseAutomate = new MouseAutomateThread();
                threadMouseAutomate.startMouse();
            } else {
                if (threadMouseAutomate != null) {
                    threadMouseAutomate.stopMouse();
                }
            }
        });

        jsDelay.setModel(new javax.swing.SpinnerNumberModel(1, 1, 60, 1));
        jsDelay.setValue(30);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jlPosition, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jtbPlay)
                                .addContainerGap()));
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jtbPlay)
                                        .addComponent(jlPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 30,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 12, Short.MAX_VALUE)));

        jbClear.setText("C");
        jbClear.addActionListener(evt -> ((DefaultListModel<String>) listPoint).clear());

        jbDel.setText("-");
        jbDel.addActionListener(evt -> {
            int selectedIndex = jlPoint.getSelectedIndex();
            if (selectedIndex != -1) {
                ((DefaultListModel<String>) listPoint).remove(selectedIndex);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING,
                                javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                                Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 197,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jbClear)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jbDel)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jbDel)
                                        .addComponent(jbClear))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 86,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15,
                                        Short.MAX_VALUE)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)));

        jbClear.getAccessibleContext().setAccessibleName("jbClear");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            EmulClick app = new EmulClick();
            app.setVisible(true);
        });
    }

    /**
     * Thread to update the mouse position in the label.
     * This thread runs in the background and updates the label
     * with the current mouse position every 100 milliseconds.
     */
    class MouseMotionThread extends Thread {
        @Override
        public void run() {
            try {
                while (true) {
                    Thread.sleep(100);
                    Point pt = MouseInfo.getPointerInfo().getLocation();
                    jlPosition.setText("Position [" + pt.x + " ," + pt.y + "]");
                }
            } catch (InterruptedException ex) {
                Logger.getLogger(org.theryble.emultesting.EmulClick.class.getName()).log(Level.SEVERE, null, ex);
                Thread.currentThread().interrupt();
            }
        }
    }

    /**
     * Custom thread class that can be started and stopped.
     * This thread simulates mouse automation and can be interrupted.
     * It includes methods to start, stop, and reset the thread.
     * The thread runs in a loop, printing a message every x seconds until stopped.
     * It can be interrupted to break out of sleep and stop gracefully.
     */
    class MouseAutomateThread extends Thread {

        private volatile boolean running = false;
        private Robot robot;

        public MouseAutomateThread() {
            try {
                robot = new Robot();
            } catch (AWTException e) {
                Logger.getLogger(EmulClick.class.getName()).log(Level.SEVERE, null, e);
            }
        }

        @Override
        public void run() {
            running = true;
            try {
                while (running) {
                    int delay = (Integer) jsDelay.getValue() * 1000;

                    for (int i = 0; i < listPoint.getSize() && running; i++) {
                        String iter = listPoint.getElementAt(i);
                        String[] parts = iter.replace("Point [", "").replace("]", "").split(",");
                        int x = Integer.parseInt(parts[0].trim());
                        int y = Integer.parseInt(parts[1].trim());

                        robot.mouseMove(x, y);
                        robot.mousePress(java.awt.event.InputEvent.BUTTON1_DOWN_MASK);
                        Thread.sleep(50); // Small delay between press and release
                        robot.mouseRelease(java.awt.event.InputEvent.BUTTON1_DOWN_MASK);
                        Thread.sleep(500); // Delay between clicks
                    }

                    if (running) {
                        Thread.sleep(delay);
                    }
                }
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt(); // Restore interrupted status
            }
        }

        public synchronized void startMouse() {
            if (!running) {
                running = true;
                start();
            }
        }

        public synchronized void stopMouse() {
            running = false;
            interrupt();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbClear;
    private javax.swing.JButton jbDel;
    private javax.swing.JList<String> jlPoint;
    private javax.swing.JLabel jlPosition;
    private javax.swing.JSpinner jsDelay;
    private javax.swing.JToggleButton jtbAdd;
    private javax.swing.JToggleButton jtbPlay;
    // End of variables declaration//GEN-END:variables
}
